Value Types
Stored directly in Stack.

Contain actual data.

When assigned to a new variable, a copy is made.

Examples: int, float, bool, char, struct, enum

int a = 10;
int b = a;
b = 20;
// a is still 10, b is 20 — two independent copies.


Reference Types
Stored in Heap, but the reference (address) is stored in Stack.

Contain reference (or pointer) to actual object.

When assigned to another variable, both variables point to same object.

class Person { public string Name; }

Person p1 = new Person();
p1.Name = "Dev";

Person p2 = p1; // p2 points to same object
p2.Name = "Ash"; 

// p1.Name is also "Ash" — because p1 and p2 point to same object


2. Stack vs Heap
🔁 Stack (LIFO - Last In First Out)
Memory for value types and method call frames.

Automatically managed.

Fast, but limited in size.

Removed when the method returns.

📚 Heap
Memory for reference types.

Larger space, slower access than stack.

Not freed automatically — managed by Garbage Collector (GC).

3. Garbage Collection Basics
🗑 What is Garbage Collection?
It automatically reclaims memory used by objects no longer referenced.

You don’t manually delete objects in C# — GC does it.

📦 When does GC collect?
When memory is low.

When CPU is idle.

Manually (rare) via GC.Collect() — but discouraged unless necessary.

⚙️ How GC Works
Marks objects still in use.

Sweeps unreachable ones.

Compacts memory by moving active objects closer.